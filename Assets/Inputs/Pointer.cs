//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/Pointer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Pointer: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Pointer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Pointer"",
    ""maps"": [
        {
            ""name"": ""PlayerPointer"",
            ""id"": ""8409d662-e16e-4b34-92dc-714d2e569154"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""68349ceb-93ab-465d-b547-2710e1cefdb9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2eb54c7e-ea0a-4814-b55a-3b21efca36f8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82e1ba12-d037-4121-8b1a-ded5e145d293"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88539259-b904-49d0-99ea-d986a02e9cb8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerPointer
        m_PlayerPointer = asset.FindActionMap("PlayerPointer", throwIfNotFound: true);
        m_PlayerPointer_PointerPosition = m_PlayerPointer.FindAction("PointerPosition", throwIfNotFound: true);
        m_PlayerPointer_Attack = m_PlayerPointer.FindAction("Attack", throwIfNotFound: true);
    }

    ~@Pointer()
    {
        UnityEngine.Debug.Assert(!m_PlayerPointer.enabled, "This will cause a leak and performance issues, Pointer.PlayerPointer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerPointer
    private readonly InputActionMap m_PlayerPointer;
    private List<IPlayerPointerActions> m_PlayerPointerActionsCallbackInterfaces = new List<IPlayerPointerActions>();
    private readonly InputAction m_PlayerPointer_PointerPosition;
    private readonly InputAction m_PlayerPointer_Attack;
    public struct PlayerPointerActions
    {
        private @Pointer m_Wrapper;
        public PlayerPointerActions(@Pointer wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerPosition => m_Wrapper.m_PlayerPointer_PointerPosition;
        public InputAction @Attack => m_Wrapper.m_PlayerPointer_Attack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerPointer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerPointerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerPointerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerPointerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerPointerActionsCallbackInterfaces.Add(instance);
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IPlayerPointerActions instance)
        {
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IPlayerPointerActions instance)
        {
            if (m_Wrapper.m_PlayerPointerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerPointerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerPointerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerPointerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerPointerActions @PlayerPointer => new PlayerPointerActions(this);
    public interface IPlayerPointerActions
    {
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
